#########################################
######## Code for Screens Script ########
#########################################

#COPY-PASTE ABOVE "SAY SCREEN" BELOW "IN-GAME SCREENS" - code for showing stream details
#This establishes a screen in which chats will appear
screen streamChat():
    frame:
        #Sets the borders and set up of the chat window
        background Solid("#ffffff00")
        xpos 1550
        ypos 120
        xsize 355
        ysize 740
        xpadding 10 #These padding variables will affect how close the position of the scrollbar relative to the frame as well
        ypadding 20
        viewport id "vp": #creates a viewport so chat can be scrolled through and there won't be overflow
            draggable True #allows scrollbar to be dragged
            mousewheel True #allows mousewheel to scroll viewport
            scrollbars "vertical" #sets vertical scroll bar
            yinitial 1.0 #should place scrollbar at bottom of viewport by default - not working though
            #Establishes a "vertical box" that displays the objects in chats_list
            vbox:
                box_reverse True #current way to make us see the newest chat by having it appear at top instead of bottom.
                spacing 10
                for c in (chatter_list): #checks through chats_list and displays the objects within that list in the vertical boxes.
                    if c.click == True: #if one of the ChatEntry objects in chats_list has "self.click = True," it will create a textbutton.
                        textbutton c.prompt:
                            action Call(c.target)
                            text_color c.colour #"#000000ff" #this applies colors to the text. It will appear as plain white text after selection because it will default back to its c.colour property. 
                            text_hover_color "#000000a1" #
                            text_selected_color "#0000004f"
                            background "#eeff00cb" #this will highlight textbuttons in yellow. Because of this, I have the text still appearing as white
                            text_size 25
                        #"text_size" can adjust how large the text is. But it would probably be best to define this in the chat_entry class
                        #in Chat_entry, add a "size" property and set it for individual ones. Then here, do "text_size = c.size"
                        #-useful if you want the size to be variable. If constant, may as well just hard code it here instead of in Class.
                    else:
                        text c.prompt color c.colour size 25 #if the ChatEntry object has "self.click = False" it will be plain text
                        #You can change color with c.colour (an attribute that was added to ChatEntry class in Lists script). The Textbutton is a bit more complicated

#A basic screen to display stream details. All the numbers will likely need to change
screen streamDetails():
    frame:
        background Solid("#ffffff00")
        xpos 0
        ypos 900
        xsize 1530
        ysize 150
        xpadding 5
        ypadding 5
        text "[pName]" align (.1, .44) color "#d418acff" #displays the name that players chose for themselves at the beginning of the game.
        text "Viewers [viewCount]" align (.99, .7) color "#000000ff" #displays the current viewer count
        text "PickledDragons\n{u}Interest:{/u}\n      [pdEngagement]" align (0.25, 0.5) color "#04cdffff"
        text "KitKat\n{u}Interest:{/u}\n      [kkEngagement]" align (0.45, 0.5) color "#f03535ff"
        text "Coriolis\n{u}Interest:{/u}\n      [csEngagement]" align (0.6, 0.5) color "#720ee6ff"
        text "Outlaw Score: [outlaw]" align (0.8, 0.25) color "#e6a20eff"
        text "Marshal Score: [marshal]" align (0.8, 0.7) color "#27e60eff"
        image "captain" align (.001, .5) size (120, 120) #displays a profile pic for the streamer


#COPY-PASTE ABOVE INPUT SCREEN, DIRECTLY BELOW "SAY_DIALOGUE" SCRIPT BLOCK - code for switching between macro and micro game narration
#This style adjusts how text will appear so that it fits a bit better within the micro-game textbox area
style ig_dialogue:
    properties gui.text_properties("dialogue")

    xpos 500 #since we're leaving the default settings for the macro game dialogue/narration, we need to edit
    #the values for xpos and xsize to fit within the diminished textbox.
    #xsize gui.dialogue_width
    xsize 900
    ypos gui.dialogue_ypos

    adjust_spacing False

#The following are styles that adjust where the say screen will appear.
style ig_window: #"in-game" window - identifies the window that is used for narration that takes place in the micro game. 
    xalign 0.5
    xoffset -240 #adjusts the alignment of the window relative to the screen.
    xfill True
    yalign 0.78
    ysize 200

    background Image("gui/ig_textbox.png", xalign=0.5, yalign=1.0) #This image should be adjusted to a different size for textboxes appearing in the micro game.

style ig_character:
    xalign 0.9
    xfill True 
    yalign 0.73
    ysize 200 

    background Image("gui/ig_textboxblue.png", xalign=0.5, yalign = 1.0)

#COPY-PASTE TO REPLACE ALL CODE IN THE CHOICE SCREEN SECTION, DIRECTLY ABOVE QUICK MENU SCREEN - code for shifting between micro and macro-game choices
screen choice(items):
    style_prefix "choice"

    if macroChoice == True:
        vbox:
            style "choice_vbox" #The default location of menu for making choices in the macro game.
            for i in items:
                textbutton i.caption action i.action
    else:
        vbox:
            style "choice_vboxMicroGame" #The alternate location of menu for making choices in the micro game.
            for i in items:
                textbutton i.caption action i.action


style choice_vbox is vbox
style choice_button is button
style choice_button_text is button_text

style choice_vbox:
    xalign 0.5
    ypos 405
    yanchor 0.5

    spacing gui.choice_spacing

#This is the style that modifies where the choice screen appears during the micro game
style choice_vboxMicroGame:
    xalign 0.175
    ypos 400
    yanchor 0.5

    spacing 20

style choice_button is default:
    properties gui.button_properties("choice_button")

style choice_button_text is default:
    properties gui.text_properties("choice_button")


######################################
###### Code for Script Script ########
######################################


define e = Character("Eileen", window_style = "ig_window", what_style = "ig_dialogue", namebox_xpos = 450)
default alt_narrator = Character(None, window_style = "ig_window", what_style = "ig_dialogue")
default reg_narrator = Character(None, window_style = "window")
define m = Character("Moze", window_style = "ig_window", what_style = "ig_dialogue", namebox_xpos = 450)
define pilot = Character("Jennica", window_style = "ig_window", what_style = "ig_dialogue", namebox_xpos = 450)
define engineer = Character("Teresa", window_style = "ig_window", what_style = "ig_dialogue", namebox_xpos = 450)
define mac = Character("MAC", window_style = "ig_window", what_style = "ig_dialogue", namebox_xpos = 450)
define shipcom = Character("Ship Intercom", window_style = "ig_window", what_style = "ig_dialogue", namebox_xpos = 450)
define agent1 = Character("Customs Agent", window_style = "ig_window", what_style = "ig_dialogue", namebox_xpos = 450)
define pName = Character("[my_name]") #represents the protagonist's name which will be defined by the player via an input screen.
default newChat = default #an empty variable that can be set to any ChatEntry object so we can add story specific comments to the chat screen.
default viewCount = 4 #viewCount changes how many viewers are displayed in the streamdetails screen
default macroChoice = False  #this variable adjusts where the choice screen will appear. It should be False when decisions happen in microgame. It should be True when decisions happen in macro game.
default macroNarration = True #this variable helps determine if a macro game choice should return us to narration style that is micro game or macro game

#variables to track morality
default marshal = 2
default outlaw = 3

#variables to track interest level
default reluctance = 0
default enthusiasm = 0

#variables to track attributes
default curiosity = False

#variables to track viewer engagement
default csEngagement = 5
default pdEngagement = 3
default kkEngagement = 4

#Approval of micro-game characters
default teresaApproval = 3
default jennicaApproval = 4



######################################
####### Code for Lists Script ########
######################################

#Lists
#This script contains the list of comments and chats that can appear in the stream


init python:
    class ChatEntry():
        #This function defines a new class of objects called ChatEntry.
        #ChatEntry objects have four potential attributes that can be defined.
        def __init__(self, click, prompt, tag, colour = "", target = "", ): #"click" has to go earlier because of the kind of argument it is.
            #self identifies the object as itself, allowing the object to reference its own attributes
            self.click = click #click is a boolean that determines if a comment is clickable or not. True is clickable, False is not.
            self.prompt = prompt #prompt is the string that will appear when the chat is shown
            self.tag = tag #tag is a numeric identifier that will allow us to "batch" comments together.
                            #Then we can do things like remove every object in the comments list with a tag == 2.
            self.colour = colour #added an attribute that will allow us to change the color of the text that appears.
                                #this probably won't be necessary, but wanted to play around with some possibilities.
                                #called it "colour" because "color" is often used by Renpy to refer to specific things and handle already determined attributes.
            self.target = target #target indicates a label that a clickable object will call.

#Example Chat Entries:
#default comment1 = ChatEntry( False, "{b}Squeejieboy33:{/b} Hope everyone's week is going well!", 1, "#000000ff" )
#default kkAsksRomance = ChatEntry (True, "{b}KitKat:{/b} Hey [pName]! Who are you thinking of romancing on this playthrough?", 0, "#000000ff", target = "streamAsksRomance")
#default comment2 = ChatEntry( False, "{b}topOmornin:{/b} Really dig the art style of this game", 2, "#000000ff", "comment2Choice")
#default comment3 = ChatEntry( True, "{b}xKSamuraiKx:{/b} Hey [pName], how's your week been?" , 1, "#000000ff", "comment3Choice")
#default comment4 = ChatEntry( False, "{b}J4MIR0QU4I:{/b} Glad to see you still streaming this game!", 1, "#000000ff", )

default chatter_list = [ ] #This is the list that displays on the Stream UI
default comments_list = [comment1, comment2, comment4] #This list contains the objects that will be shuffled and chosen from to add to "chats"
#Objects will be taken from this list and added to "chats_list"
    
init python:
    def AddToChats():

        global comment_list
        global chatter_list

        renpy.random.shuffle(comments_list) #This shuffles the comments_list so they appear in a random order
        chatter_list.append(comments_list[0]) 
        comments_list.remove(comments_list[0])
        return

    def addStoryBeat(): 
        global chatter_list
        global comments_list
        global newChat
        chatter_list.append(newChat)
        return

##labels for chatter targets

label comment2Choice():
    $ macroChoice = True
    $ comment2.click = False 

    $ narrator = reg_narrator 
    menu:
        "It's cool!":
            pName "I love all the little details too with all the different characters."
            $ csEngagement += 1
        "I prefer the previous game, actually.":
            pName "I actually think some things took a step back. The UI especially just looks a little generic to me."
            $ pdEngagement += 1
    $ macroChoice = False 
    if macroNarration == False:
        $ narrator = alt_narrator #And you will need to manually revert the narrator back to the in-game narrator to shift their textbox properly.
    else:
        $ narrator = reg_narrator
    return

label comment3Choice():
    $ macroChoice = True #If this is a decision happening in the macrogame, change this boolean so that the choice screen will appear in its default state
    $ comment3.click = False #makes the chat unclickable once it has been clicked.
    #This should reference the specific ChatEntry object that directs here through its target attribute.
    # eg. if comment64 directs to a certain label, add $ comment64.click = False, to turn it off
    $ narrator = reg_narrator # you also need to manually change the narrator so that the text appears outside the micro game
    menu:
        "Kinda rough":
            pName "Oh man, I had this test earlier in the week. Spent all Monday and Tuesday cramming."
            pName "Fingers crossed I passed, essay tests are not my forte."
            $ pdEngagement -= 1
            $ csEngagement += 1
        "It was fine":
            pName "Nothing much happened actually. School is what it is. Glad to be back on the game now!"
    $ macroChoice = False #set macroChoice back to false at the end of this interaction so that the 
    #choice screen will appear appropriately for micro-game choices.
    if macroNarration == False:
        $ narrator = alt_narrator #And you will need to manually revert the narrator back to the in-game narrator to shift their textbox properly.
    else:
        $ narrator = reg_narrator
    return

label streamAsksRomance():
    $ macroChoice = True
    $ kkAsksRomance.click = False
    $ narrator = reg_narrator
    menu:
        "I'm thinking Jennica":
            pName "Jennica's sweet, I'm leaning her at the moment!"
            $ csEngagement += 1
            $ romanceJennica = True
            $ romanceTeresa = False
            $ romanceAma = False
            pause 0.5
            $ newChat = csJennica
            $ addStoryBeat()
            pause 1.0
        "Probably Teresa":
            pName "Teresa for sure. She's got an edge I appreciate."
            $ kkEngagement += 1
            $ romanceTeresa = True
            $ romanceAma = False
            $ romanceJennica = False
            pause 0.5
            $ newChat = kkTeresa
            $ addStoryBeat()
            pause 1.0
        "Ama all day, for sure":
            $ pdEngagement += 1
            $ kkEngagement += 1
            $ csEngagement += 1
            pName "Actually, I'm holding out that there will be an Ama romance path."
            $ romanceAma = True
            $ romanceTeresa = False
            $ romanceJennica = False
            pause 1.0
            $ newChat = commentNothingPD
            $ addStoryBeat()
            pause 1.0
            $ newChat = commentNothingKK2
            $ addStoryBeat()
            pause 1.0
    $ macroChoice = False
    if macroNarration == False:
        $ narrator = alt_narrator #And you will need to manually revert the narrator back to the in-game narrator to shift their textbox properly.
    else:
        $ narrator = reg_narrator    
    return

  
